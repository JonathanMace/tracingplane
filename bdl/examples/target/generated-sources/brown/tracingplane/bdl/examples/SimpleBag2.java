/** Generated by BaggageBuffersCompiler */
package brown.tracingplane.bdl.examples;

import brown.tracingplane.ActiveBaggage;
import brown.tracingplane.BaggageContext;
import brown.tracingplane.baggageprotocol.BagKey;
import brown.tracingplane.baggageprotocol.BaggageReader;
import brown.tracingplane.baggageprotocol.BaggageWriter;
import brown.tracingplane.bdl.BDLUtils;
import brown.tracingplane.bdl.Bag;
import brown.tracingplane.bdl.BaggageHandler;
import brown.tracingplane.bdl.Brancher;
import brown.tracingplane.bdl.Branchers;
import brown.tracingplane.bdl.Joiner;
import brown.tracingplane.bdl.Joiners;
import brown.tracingplane.bdl.Parser;
import brown.tracingplane.bdl.Parsers;
import brown.tracingplane.bdl.Serializer;
import brown.tracingplane.bdl.Serializers;
import brown.tracingplane.impl.BDLContextProvider;
import brown.tracingplane.impl.BaggageHandlerRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class SimpleBag2 implements Bag {

    private static final Logger _log = LoggerFactory.getLogger(SimpleBag2.class);

    public Integer firstField = null;
    public String secondField = null;

    public boolean _overflow = false;

    /**
    * <p>
    * Get the {@link SimpleBag2} set in the active {@link BaggageContext} carried by the current thread. If no baggage is being
    * carried by the current thread, or if there is no SimpleBag2 in it, then this method returns {@code null}.
    * </p>
    *
    * <p>
    * To get SimpleBag2 from a specific Baggage instance, use {@link #getFrom(BaggageContext)}.
    * </p>
    *
    * @return the SimpleBag2 being carried in the {@link BaggageContext} of the current thread, or {@code null}
    *         if none is being carried. The returned instance maybe be modified and modifications will be reflected in
    *         the baggage.
    */
    public static SimpleBag2 get() {
        Bag bag = BDLContextProvider.get(ActiveBaggage.peek(), Handler.registration());
        if (bag instanceof SimpleBag2) {
            return (SimpleBag2) bag;
        } else {
            return null;
        }
    }

    /**
    * <p>
    * Get the {@link SimpleBag2} set in {@code baggage}. If {@code baggage} has no SimpleBag2 set then
    * this method returns null.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the Baggage being carried by the current thread.  To get SimpleBag2
    * from the current thread's Baggage, use {@link #get()}.
    * </p>
    *
    * @param baggage A baggage instance to get the {@link SimpleBag2} from
    * @return the {@link SimpleBag2} instance being carried in {@code baggage}, or {@code null} if none is being carried.
    *         The returned instance can be modified, and modifications will be reflected in the baggage.
    */
    public static SimpleBag2 getFrom(BaggageContext baggage) {
        Bag bag = BDLContextProvider.get(baggage, Handler.registration());
        if (bag instanceof SimpleBag2) {
            return (SimpleBag2) bag;
        } else if (bag != null) {
            Handler.checkRegistration();
        }
        return null;
    }

    /**
    * <p>
    * Update the {@link SimpleBag2} set in the current thread's baggage. This method will overwrite any existing
    * SimpleBag2 set in the current thread's baggage.
    * </p>
    *
    * <p>
    * To set the {@link SimpleBag2} in a specific {@link BaggageContext} instance, use
    * {@link #setIn(BaggageContext, SimpleBag2)}
    * </p>
    *
    * @param simpleBag2 the new {@link SimpleBag2} to set in the current thread's {@link BaggageContext}. If {@code null}
    *            then any existing mappings will be removed.
    */
    public static void set(SimpleBag2 simpleBag2) {
        ActiveBaggage.update(BDLContextProvider.set(ActiveBaggage.peek(), Handler.registration(), simpleBag2));
    }

    /**
    * <p>
    * Update the {@link SimpleBag2} set in {@code baggage}. This method will overwrite any existing
    * SimpleBag2 set in {@code baggage}.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the {@link BaggageContext} being carried by the current thread. To set the
    * {@link SimpleBag2} for the current thread, use {@link #set(SimpleBag2)}
    * </p>
    *
    * @param baggage A baggage instance to set the {@link SimpleBag2} in
    * @param simpleBag2 the new SimpleBag2 to set in {@code baggage}. If {@code null}, it will remove any
    *            mapping present.
    * @return a possibly new {@link BaggageContext} instance that contains all previous mappings plus the new mapping.
    */
    public static BaggageContext setIn(BaggageContext baggage, SimpleBag2 simpleBag2) {
        return BDLContextProvider.set(baggage, Handler.registration(), simpleBag2);
    }

    @Override
    public BaggageHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("SimpleBag2{\n");
            b.append(this.firstField == null ? "" : BDLUtils.indent(String.format("firstField = %s\n", String.valueOf(this.firstField))));
            b.append(this.secondField == null ? "" : BDLUtils.indent(String.format("secondField = %s\n", String.valueOf(this.secondField))));
            b.append("}");
        return b.toString();
    }

    public static class Handler implements BaggageHandler<SimpleBag2> {

        public static final Handler instance = new Handler();
        private static BagKey registration = null;

        static synchronized BagKey checkRegistration() {
            registration = BaggageHandlerRegistry.get(instance);
            if (registration == null) {
                _log.error("SimpleBag2 MUST be registered to a key before it can be propagated.  " +
                "There is currently no registration for SimpleBag2 and it will not be propagated. " +
                "To register a bag set the bag.{index} property in your application.conf (eg, for " +
                "index 10, bag.10 = \"brown.tracingplane.bdl.examples.SimpleBag2\") or with -Dbag.{index} flag " +
                "(eg, for index 10, -Dbag.10=brown.tracingplane.bdl.examples.SimpleBag2)");
            }
            return registration;
        }

        static BagKey registration() {
            return registration == null ? checkRegistration() : registration;
        }

        private Handler(){}

        private static final BagKey _firstFieldKey = BagKey.indexed(1);
        private static final BagKey _secondFieldKey = BagKey.indexed(2);

        private static final Parser<Integer> _firstFieldParser = Parsers.int32Parser();
        private static final Serializer<Integer> _firstFieldSerializer = Serializers.int32Serializer();
        private static final Brancher<Integer> _firstFieldBrancher = Branchers.<Integer>noop();
        private static final Joiner<Integer> _firstFieldJoiner = Joiners.<Integer>first();

        private static final Parser<String> _secondFieldParser = Parsers.stringParser();
        private static final Serializer<String> _secondFieldSerializer = Serializers.stringSerializer();
        private static final Brancher<String> _secondFieldBrancher = Branchers.<String>noop();
        private static final Joiner<String> _secondFieldJoiner = Joiners.<String>first();

        @Override
        public boolean isInstance(Bag bag) {
            return bag == null || bag instanceof SimpleBag2;
        }

        @Override
        public SimpleBag2 parse(BaggageReader reader) {
            SimpleBag2 instance = new SimpleBag2();

            if (reader.enter(_firstFieldKey)) {
                instance.firstField = _firstFieldParser.parse(reader);
                reader.exit();
            }

            if (reader.enter(_secondFieldKey)) {
                instance.secondField = _secondFieldParser.parse(reader);
                reader.exit();
            }
            instance._overflow = reader.didOverflow();

            return instance;
        }

        @Override
        public void serialize(BaggageWriter writer, SimpleBag2 instance) {
            if (instance == null) {
                return;
            }

            writer.didOverflowHere(instance._overflow);

            if (instance.firstField != null) {
                writer.enter(_firstFieldKey);
                _firstFieldSerializer.serialize(writer, instance.firstField);
                writer.exit();
            }

            if (instance.secondField != null) {
                writer.enter(_secondFieldKey);
                _secondFieldSerializer.serialize(writer, instance.secondField);
                writer.exit();
            }
        }

        @Override
        public SimpleBag2 branch(SimpleBag2 instance) {
            if (instance == null) {
                return null;
            }

            SimpleBag2 newInstance = new SimpleBag2();
            newInstance.firstField = _firstFieldBrancher.branch(instance.firstField);
            newInstance.secondField = _secondFieldBrancher.branch(instance.secondField);
            return newInstance;
        }

        @Override
        public SimpleBag2 join(SimpleBag2 left, SimpleBag2 right) {
            if (left == null) {
                return right;
            } else if (right == null) {
                return left;
            } else {
                left.firstField = _firstFieldJoiner.join(left.firstField, right.firstField);
                left.secondField = _secondFieldJoiner.join(left.secondField, right.secondField);
                return left;
            }
        }
    }
}