/** Generated by BaggageBuffersCompiler */
package edu.brown.xtrace;

import java.util.Set;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import edu.brown.cs.systems.tracingplane.transit_layer.Baggage;
import edu.brown.cs.systems.tracingplane.baggage_layer.BagKey;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageReader;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageWriter;
import edu.brown.cs.systems.tracingplane.baggage_buffers.BaggageBuffers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.Registrations;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Bag;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Parser;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Serializer;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Brancher;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Joiner;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.BaggageHandler;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.BBUtils;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.ReaderHelpers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.WriterHelpers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Parsers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Serializers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Branchers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Joiners;

public class XTraceMetadata implements Bag {

    private static final Logger _log = LoggerFactory.getLogger(XTraceMetadata.class);

    public Long taskId = null;
    public Set<Long> parentEventIds = null;

    public boolean _overflow = false;

    /**
    * <p>
    * Get the {@link XTraceMetadata} set in the {@link Baggage} carried by the current thread. If no baggage is being
    * carried by the current thread, or if there is no XTraceMetadata in it, then this method returns {@code null}.
    * </p>
    *
    * <p>
    * To get XTraceMetadata from a specific Baggage instance, use {@link #getFrom(Baggage)}.
    * </p>
    *
    * @return the XTraceMetadata being carried in the {@link Baggage} of the current thread, or {@code null}
    *         if none is being carried. The returned instance maybe be modified and modifications will be reflected in
    *         the baggage.
    */
    public static XTraceMetadata get() {
        Bag bag = BaggageBuffers.get(Handler.registration());
        if (bag instanceof XTraceMetadata) {
            return (XTraceMetadata) bag;
        } else {
            return null;
        }
    }

    /**
    * <p>
    * Get the {@link XTraceMetadata} set in {@code baggage}. If {@code baggage} has no XTraceMetadata set then
    * this method returns null.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the Baggage being carried by the current thread.  To get XTraceMetadata
    * from the current thread's Baggage, use {@link #get()}.
    * </p>
    *
    * @param baggage A baggage instance to get the {@link XTraceMetadata} from
    * @return the {@link XTraceMetadata} instance being carried in {@code baggage}, or {@code null} if none is being carried.
    *         The returned instance can be modified, and modifications will be reflected in the baggage.
    */
    public static XTraceMetadata getFrom(Baggage baggage) {
        Bag bag = BaggageBuffers.get(baggage, Handler.registration());
        if (bag instanceof XTraceMetadata) {
            return (XTraceMetadata) bag;
        } else if (bag != null) {
            Handler.checkRegistration();
        }
        return null;
    }

    /**
    * <p>
    * Update the {@link XTraceMetadata} set in the current thread's baggage. This method will overwrite any existing
    * XTraceMetadata set in the current thread's baggage.
    * </p>
    *
    * <p>
    * To set the {@link XTraceMetadata} in a specific {@link Baggage} instance, use
    * {@link #setIn(Baggage, XTraceMetadata)}
    * </p>
    *
    * @param xTraceMetadata the new {@link XTraceMetadata} to set in the current thread's {@link Baggage}. If {@code null}
    *            then any existing mappings will be removed.
    */
    public static void set(XTraceMetadata xTraceMetadata) {
        BaggageBuffers.set(Handler.registration(), xTraceMetadata);
    }

    /**
    * <p>
    * Update the {@link XTraceMetadata} set in {@code baggage}. This method will overwrite any existing
    * XTraceMetadata set in {@code baggage}.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the {@link Baggage} being carried by the current thread. To set the
    * {@link XTraceMetadata} for the current thread, use {@link #set(XTraceMetadata)}
    * </p>
    *
    * @param baggage A baggage instance to set the {@link XTraceMetadata} in
    * @param xTraceMetadata the new XTraceMetadata to set in {@code baggage}. If {@code null}, it will remove any
    *            mapping present.
    * @return a possibly new {@link Baggage} instance that contains all previous mappings plus the new mapping.
    */
    public static Baggage setIn(Baggage baggage, XTraceMetadata xTraceMetadata) {
        return BaggageBuffers.set(baggage, Handler.registration(), xTraceMetadata);
    }

    @Override
    public BaggageHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("XTraceMetadata{\n");
            b.append(this.taskId == null ? "" : BBUtils.indent(String.format("taskId = %s\n", String.valueOf(this.taskId))));
            b.append(this.parentEventIds == null ? "" : BBUtils.indent(String.format("parentEventIds = %s\n", BBUtils.toString(this.parentEventIds))));
            b.append("}");
        return b.toString();
    }

    public static class Handler implements BaggageHandler<XTraceMetadata> {

        public static final Handler instance = new Handler();
        private static BagKey registration = null;

        static synchronized BagKey checkRegistration() {
            registration = Registrations.lookup(instance);
            if (registration == null) {
                _log.error("XTraceMetadata MUST be registered to a key before it can be propagated.  " +
                "There is currently no registration for XTraceMetadata and it will not be propagated. " +
                "To register a bag set the baggage-buffers.bags property in your application.conf " +
                "or with -Dbaggage-buffers.bags flag (eg, for key 10, -Dbaggage-buffers.bags.10=" + XTraceMetadata.class.getName());
            }
            return registration;
        }

        static BagKey registration() {
            return registration == null ? checkRegistration() : registration;
        }

        private Handler(){}

        private static final BagKey _taskIdKey = BagKey.indexed(1);
        private static final BagKey _parentEventIdsKey = BagKey.indexed(2);

        private static final Parser<Long> _taskIdParser = Parsers.fixed64Parser();
        private static final Serializer<Long> _taskIdSerializer = Serializers.fixed64Serializer();
        private static final Brancher<Long> _taskIdBrancher = Branchers.<Long>noop();
        private static final Joiner<Long> _taskIdJoiner = Joiners.<Long>first();

        private static final Parser<Set<Long>> _parentEventIdsParser = Parsers.setParser(Parsers.fixed64Parser());
        private static final Serializer<Set<Long>> _parentEventIdsSerializer = Serializers.setSerializer(Serializers.fixed64Serializer());
        private static final Brancher<Set<Long>> _parentEventIdsBrancher = Branchers.<Long>set();
        private static final Joiner<Set<Long>> _parentEventIdsJoiner = Joiners.<Long>setUnion();

        @Override
        public boolean isInstance(Bag bag) {
            return bag == null || bag instanceof XTraceMetadata;
        }

        @Override
        public XTraceMetadata parse(BaggageReader reader) {
            XTraceMetadata instance = new XTraceMetadata();

            if (reader.enter(_taskIdKey)) {
                instance.taskId = _taskIdParser.parse(reader);
                reader.exit();
            }

            if (reader.enter(_parentEventIdsKey)) {
                instance.parentEventIds = _parentEventIdsParser.parse(reader);
                reader.exit();
            }
            instance._overflow = reader.didOverflow();

            return instance;
        }

        @Override
        public void serialize(BaggageWriter writer, XTraceMetadata instance) {
            if (instance == null) {
                return;
            }

            writer.didOverflowHere(instance._overflow);

            if (instance.taskId != null) {
                writer.enter(_taskIdKey);
                _taskIdSerializer.serialize(writer, instance.taskId);
                writer.exit();
            }

            if (instance.parentEventIds != null) {
                writer.enter(_parentEventIdsKey);
                _parentEventIdsSerializer.serialize(writer, instance.parentEventIds);
                writer.exit();
            }
        }

        @Override
        public XTraceMetadata branch(XTraceMetadata instance) {
            if (instance == null) {
                return null;
            }

            XTraceMetadata newInstance = new XTraceMetadata();
            newInstance.taskId = _taskIdBrancher.branch(instance.taskId);
            newInstance.parentEventIds = _parentEventIdsBrancher.branch(instance.parentEventIds);
            return newInstance;
        }

        @Override
        public XTraceMetadata join(XTraceMetadata left, XTraceMetadata right) {
            if (left == null) {
                return right;
            } else if (right == null) {
                return left;
            } else {
                left.taskId = _taskIdJoiner.join(left.taskId, right.taskId);
                left.parentEventIds = _parentEventIdsJoiner.join(left.parentEventIds, right.parentEventIds);
                return left;
            }
        }
    }
}